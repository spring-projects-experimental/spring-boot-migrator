- name: sbu30-report
  description: Create a report for Spring Boot Upgrade from 2.7.x to 3.0.x
  condition:
    type: org.springframework.sbm.boot.common.conditions.IsSpringBootProject
    versionPattern: "2\\.7\\..*"

  actions:

    - type: org.springframework.sbm.boot.upgrade_27_30.report.SpringBootUpgradeReportAction
      file: report
      condition:
        type: org.springframework.sbm.common.migration.conditions.TrueCondition

      dataProvider: org.springframework.sbm.boot.upgrade_27_30.report.SpringBootUpgradeReportDataProvider

      header: |-
        [[index]]
        = Spring Boot 3 Upgrade Report
        <#if contributors?has_content>
        <#list contributors as contributor>
        ${contributor.name}<#sep>,</#sep>
        </#list>
        </#if>
        :source-highlighter: highlight.js
        :highlightjs-languages: java
        :doctype: book
        :idprefix:
        :idseparator: -
        :toc: left
        :sectnumlevels: 2
        :toclevels: 2
        :tabsize: 4
        :numbered:
        :sectanchors:
        :sectnums:
        :hide-uri-scheme:
        :docinfo: shared,private
        :attribute-missing: warn
        :chomp: default headers packages
        :spring-boot-artifactory-repo: snapshot
        :github-tag: main
        :spring-boot-version: current
        :stylesheet: /css/button.css
        
        == Introduction
        This report aims to help with updating spring Boot applications from 2.7 to 3.0.
        The listed changes should be applied in the given order. 
        It follows basically this order:
        
        . Prepare the 2.7 application
        . Upgrade Spring Security to 5.8
        . Upgrade to Spring Boot 3.0
        
        NOTE: The recipes should be applied in the given order!
        
        You can find us on GitHub.
        Please report all problems.
        
        === Application Information
        <#assign coordinates>${scannedCoordinate}</#assign>
        [cols="1h,3"]
        |===
        | Scanned dir | ${scannedProjectRoot}
        | Revision | <#if revision?has_content>`${revision}`<#else>Scanned project not under Git</#if>
        <#if projectName?has_content>
        | Project name |  ${projectName}
        </#if>
        | Coordinate | ${scannedCoordinate}
        | Boot version | ${bootVersion}
        <#if numberOfChanges?has_content>
        | Changes | ${numberOfChanges}
        </#if>
        |===
        
        The application was scanned and matched against the changes listed in the
        https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Release-Notes[Spring Boot 3.0 Release Notes]
        as well as from https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x[Spring Framework 5.x Release Notes].
        
        The Relevant Changes section lists all potentially required changes to upgrade the scanned application to Spring Boot 3.0.
        
        NOTE: JDK 17 is required for Spring Boot 3
        
        == Relevant Changes
        
        This section lists the changes SBM found to be applicable to upgrade the scanned application to Spring Boot 3.0.0.

      sections:


# Note re required anymore now that 3.0 is released. Kept for reference
#        - title: Add Spring Boot dependency and plugin milestone repository
#          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.AddSpringBootRepositoriesHelper
#          change: |-
#            As currently only milestone releases exist these are required
#          affected: |-
#            You want to update to 3.0 so you're affected
#          remediation:
#            description: |-
#              Add Spring Boot milestone repositories.
#            recipe: sbu30-add-milestone-repositories
#          gitHubIssue: 441
#          contributors:
#            - "Fabian Krüger[@fabapp2]"

        - title: Upgrade Dependencies
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.UpgradeDependenciesHelper
          change: |-
            Spring Boot 3.0 upgraded many used dependencies. 
            Also, dependencies previously in the `javax` packages use the new `jakarta` packages now.
            WARNING: THis is a dummy and needs to be replaced with the matching changes from the release notes!
          affected: |-
            List the found dependencies here?
          remediation:
            description: |-
              A comprehensive list of affected dependencies and their new replacements
            recipe: sbu30-upgrade-dependencies
          contributors:
            - "Fabian Krüger[@fabapp2]"

        - title: Upgrade Spring Boot Version to 3.0
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.UpgradeSpringBootVersionHelper
          change: |-
            The Spring Boot version changed to 3.0
          affected: |-
            Upgrading to Spring Boot 3.0 requires an upgrade of the current Spring Boot version.
          remediation:
            description: |-
              Depending on the way Spring Boot is added, e.g. by referencing `spring-boot-starter-parent` or through 
              `dependencyManagement` these need to be changed to upgrade to Spring Boot 3.0.
            recipe: sbu30-upgrade-boot-version
          githubIssue: TODO
          contributors:
            - "Fabian Krüger[@fabapp2]"


        - title: Actuator Endpoints Sanitization
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.ActuatorEndpointsSanitizationHelper
          change: |-
            Since, the `/env` and `/configprops` endpoints can contains sensitive values, all values are always masked by default.
            This used to be case only for keys considered to be sensitive.
            
            Instead, this release opts for a more secure default.
            The keys-based approach has been removed in favor of a role based approach, similar to the health endpoint details.
            Whether unsanitized values are shown or not can be configured using a property which can have the following values:
          
            - `NEVER` - All values are sanitized.
            - `ALWAYS` - All values are present in the output (sanitizing functions will apply).
            - `WHEN_AUTHORIZED` - Values are present in the output only if a user is authorized (sanitizing functions will apply).
            
            For JMX, users are always considered to be authorized. For HTTP, users are considered to be authorized if they are authenticated and have the specified roles.
            
            Sanitization for the QuartzEndpoint is also configurable in the same way.
          affected: |-
            The scan found a dependency to actuator on the classpath.
            
            <#list matchingBuildFiles as match>
              * file://${match.absolutePath}[`${match.sourcePath}`]<#lt>
            </#list>
          remediation:
            possibilities:
              - title: Verify the new sanitization fulfills your requirements
                description: |- 
                  Please verify that none of the sanitized values must be plain text to meet your requirements.
                  If some sanitized values are required in plain text a custom `SanitizingFunction` must be provided.
                  Please see the documentation about https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/howto.html#howto.actuator.sanitize-sensitive-values.customizing-sanitization[Customizing Sanitization^, role="ext-link"] 
                  for further information on how to do this.
                resources:
                  - https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/howto.html#howto.actuator.sanitize-sensitive-values[Sanitize Sensitive Values^, role="ext-link"]
                  - https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/howto.html#howto.actuator.sanitize-sensitive-values.customizing-sanitization[Customizing Sanitization^, role="ext-link"]
# Not available until upgrade to the latest rewrite version which is currently blocked
#
#              - title: Reset behavior to prior 3.0
#                description: |-
#                  Because Spring Boot Migrator can't tell if the now sanitized properties are required in plain-text,
#                  the only automated change we can do is setting `management.endpoint.configprops.show-values`,
#                  `management.endpoint.env.show-values` and `management.endpoint.quartz.show-values` to `ALWAYS`.
#                  This means the application does not benefit from the new and more secure configuration in Spring Boot 3.0.0.
#                  We strongly recommend you adjust this configuration to your needs.
#
#                  WARNING:  This would result in some values not being sanitized when in 2.7 they would have been.
#                recipe: sbu30-225-actuator-endpoint-sanitization
          projects:
            - spring-boot
            - actuator
          gitHubIssue: 445
          contributors:
            - "Fabian Krüger[@fabapp2]"

        - title: Changes to Data Properties
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.ChangesToDataPropertiesHelper
          change: |-
            The data prefix has been reserved for Spring Data and any properties under the `spring.data` prefix imply that Spring
            Data is required on the classpath.
          affected: |-
            The scan found properties with `spring.data` prefix but no dependency matching `org.springframework.data:.*`.

            <#list matches as match>
              * file://${match.absolutePath}[`${match.relativePath}`]<#lt>
              <#list match.propertiesFound as property>
              ** `${property}`<#lt>
              </#list>
            </#list>
          remediation:
            description: |-
              Either add `spring-data` dependency, rename the property or remove it in case it's not required anymore.
            recipe: sbu30-migrate-spring-data-properties
          gitHubIssue: 441
          contributors:
            - "Fabian Krüger[@fabapp2]"



        - title: Logging Date Format
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.LoggingDateFormatHelper
          change: |-
            The default format for the date and time component of log messages for Logback and Log4j2 has changed to
            align with the ISO-8601 standard. The new default format `yyyy-MM-dd’T’HH:mm:ss.SSSXXX` uses a `T` to
            separate the date and time instead of a space character and adds the timezone offset to the end.
            The `LOG_DATEFORMAT_PATTERN` environment variable or `logging.pattern.dateformat` property can be used to
            restore the previous default value of `yyyy-MM-dd HH:mm:ss.SSS`.
          affected: |-
            The scan found no property `logging.pattern.dateformat`.
          remediation:
            description: |-
              Set `logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS` to fall back to the previous log format.
            recipe: sbu30-225-logging-date-format
          gitHubIssue: 489
          contributors:
            - "Fabian Krüger[@fabapp2]"

        - title: Banner support
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.BannerSupportHelper
          change: |-
            Support for image-based application banners has been removed. banner.gif, banner.jpg, and banner.png
            files are now ignored and should be replaced with a text-based banner.txt file.
          affected: |-
            The scan found banner image files here:

            <#list files as file>
            * `${file}`
            </#list>
          remediation:
            description: ""
            possibilities:
            - title: Remove image banner
              description: |- 
                Remove these image banners 
        
                <#list files as file>
                * `${file}`
                </#list>
              recipe: sbu30-remove-image-banner
            - title: Replace image banner
              description: |- 
                Replace these banners 
                
                <#list files as file>
                * `${file}`
                </#list>
                
                with `banner.txt`

          gitHubIssue: 150
          contributors:
            - "Sandeep Nagaraj[@sanagaraj-pivotal]"
            - "Fabian Krüger[@fabapp2]"


        - title: Constructor Binding
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConstructorBindingHelper
          change: |-
            When using constructor bound @ConfigurationProperties the @ConstructorBinding annotation
            is no longer required if the class has a single parameterized constructor.
            If you have more than one constructor, you’ll still need to use `@ConstructorBinding`
            to tell Spring Boot which one to use.

            For most users, this updated logic will allow for simpler `@ConfigurationProperties`
            classes. If, however, you have a `@ConfigurationProperties` and you want to inject
            beans into the constructor rather than binding it, you’ll now need to add an
            `@Autowired` annotation.
          sources:
            - https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes#constructingbinding-no-longer-needed-at-the-type-level[Spring Boot Release Notes]
            - https://docs.spring.io/spring-boot/docs/3.0.0/api/org/springframework/boot/context/properties/ConstructorBinding.html[@ConstructorBinding API]
            - https://docs.spring.io/spring-boot/docs/3.0.0/api/org/springframework/boot/context/properties/ConfigurationProperties.html[@ConfigurationProperties API]
          affected: |-
            We found usage of `@ConstructorBinding` in following files:

            <#list files as file>
            * ${file}
            </#list>
          remediation:
            description:  |-
              Remove `@ConstructorBinding` if it matches the criteria, please refer issue: https://github.com/spring-projects-experimental/spring-boot-migrator/issues/166[#166]
              for more information
            resources:
              - https://github.com/spring-projects-experimental/spring-boot-migrator/issues/166[Issue 166]
            recipe: sbu30-remove-construtor-binding
          gitHubIssue: 166
          recipe: boot-2.7-3.0-upgrade-report
          contributors:
            - "Sandeep Nagaraj[@sanagaraj-pivotal]"


        - title: Spring MVC and WebFlux URL matching changes
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.SpringMVCAndWebFluxUrlMatchingChangesHelper
          change: |-
            As of Spring Framework 6.0, the trailing slash matching configuration option has been deprecated and its default value set to `false`.
            This means that previously, the following controller would match both "GET /some/greeting" and "GET /some/greeting/":

            ```
            @RestController
            public class MyController {

              @GetMapping("/some/greeting")
              public String greeting {
                return "Hello";
              }

            }
            ```

            As of https://github.com/spring-projects/spring-framework/issues/28552[this Spring Framework change], "GET /some/greeting/" doesn't
            match anymore by default.

            Developers should instead configure explicit redirects/rewrites through a proxy, a Servlet/web filter, or even declare the additional route explicitly on the controller handler (like `@GetMapping("/some/greeting", "/some/greeting/")` for more targeted cases.

            Until your application fully adapts to this change, you can change the default with the following global configuration:

            ```
            @Configuration
            public class WebConfiguration implements WebMvcConfigurer {

                @Override
                public void configurePathMatch(PathMatchConfigurer configurer) {
                  configurer.setUseTrailingSlashMatch(true);
                }

            }
            ```
          sources:
            - https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M4-Release-Notes#spring-mvc-and-webflux-url-matching-changes[Spring Boot Release Notes]
            - https://github.com/spring-projects/spring-framework/issues/28552[SpringFramework Issue 28552]
          affected: |-
            The scan found classes annotated with `@RestController` which could be affected by this change.
            <#list restControllers as restController>
              * file://${restController.absolutePath}[`${restController.sourcePath}`]<#lt>
            </#list>
          remediation:
            description: |-
              You have different choices to remediate this change.
            possibilities:
            - title: Do Nothing
              description:  |-
                 If no clients expect a response for requests with a trailing `/` nothing needs to done.
            - title: Configure explicit redirects/rewrites
              description: |-
                Configure explicit redirects/rewrites through a proxy, a Servlet/web filter.
            - title: Add additional path mappings
              description: |-
                If only some endpoints should handle requests with a trailing `/`, another path can be provided to the
                existing request mapping.
                
                [source, java]
                ....
                @RequestMapping(value = {"/current/path", "current/path/"})
                
                @RequestMapping(path = {"/current/path", "current/path/"})
                
                @GetMapping(value = {"/current/path", "current/path/"})
                
                @GetMapping(path = {"/current/path", "current/path/"})
                ...
                ....
              resources:
                - https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/GetMapping.html[@GetMapping API]
                - https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html[@RequestMapping API]

            - title: Reset behavior to prior 3.0
              description: |-
                If all rest controllers must serve requests with trailing `/`, a `PathMatchConfigurer` should be configured like so:
                
                [source, java]
                ....
                @Configuration
                public class WebConfiguration implements WebMvcConfigurer {
                
                  @Override
                  public void configurePathMatch(PathMatchConfigurer configurer) {
                    configurer.setUseTrailingSlashMatch(true);
                  }
              
                }
                ....

              recipe: sbu30-248-add-PathMatchConfigurer
          gitHubIssue: 522
          projects:
          - spring-boot
          - spring-framework
          contributors:
          - Fabian Krüger[@fabapp2]

        - title: Paging and sorting repository
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.PagingAndSortingHelper
          change: |-
            Sorting repositories no longer extend their respective CRUD repository.

            The affected interfaces are:

            * `PagingAndSortingRepository` no longer extends `CrudRepository`
            * `ReactiveSortingRepository` no longer extends `ReactiveCrudRepository`
            * `RxJavaSortingRepository` no longer extends `RxJavaCrudRepository`
          sources:
            - https://github.com/spring-projects/spring-data-commons/wiki/Spring-Data-2022.0-%28Turing%29-Release-Notes#sorting-repositories-no-longer-inherit-from-crud-repositories
          affected: |-
            <#if pagingAndSortingRepos?size != 0>
            We found classes which uses `PagingAndSortingRepository` in following files:
            
            <#list pagingAndSortingRepos as file>
            * `${file}`
            </#list>
            
            </#if>
            <#if reactivePagingAndSortingRepos?size != 0>
            We found classes which uses `ReactiveSortingRepository` in following files:

            <#list reactivePagingAndSortingRepos as file>
            * `${file}`
            </#list>
            
            </#if>
            <#if rxJavaSortingRepos?size != 0>
            We found classes which uses `RxJavaSortingRepository` in following files:

            <#list rxJavaSortingRepos as file>
            * `${file}`
            </#list>
            
            </#if>
          remediation:
            description: |-
              If one requires the old behavior one must extend not only the sorting repository, but also the respective CRUD repository explicitly. This was done so the sorting support could easily be combined with the List repositories introduced above.
            recipe: sbu30-paging-and-sorting-repository
          gitHubIssue: 518
          contributors:
            - "Sandeep Nagaraj[@sanagaraj-pivotal]"

        - title: Commons Multipart Upload
          helper: org.springframework.sbm.boot.upgrade_27_30.report.helper.CommonsMultipartResolverHelper
          change: |-
            Support for Spring Framework’s `CommonsMultipartResolver` has been removed following its removal in Spring Framework 6
          affected: |-
            We found usage of `CommonsMultipartResolver` in following files:
            
            <#list types as type>
            * `${type}`
            </#list>
          remediation:
            description: |-
              Remove beans of type `CommonsMultipartResolver` and rely on Spring Boot auto-configuration
          gitHubIssue: 541
          contributors:
            - "Sandeep Nagaraj[@sanagaraj-pivotal]"



        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#multiple-batch-jobs
        #
        - title: "Multiple Batch Jobs"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.batch\:.*'

          change: |-
            Running multiple batch jobs is no longer supported.
            If the auto-configuration detects a single job is, it will be executed on startup.
            If multiple jobs are found in the context, a job name to execute on startup must be supplied by the user using the `spring.batch.job.name` property.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.batch\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#multiple-batch-jobs[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/618[#618^, role="ext-link"]**
              ====
          projects:
            - spring-batch
          gitHubIssue: 618
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#auto-configuration-of-micrometer-s-jvminfometrics
        #
        - title: "Auto-configuration of Micrometer's JvmInfoMetrics"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'io\.micrometer\:micrometer-.*'

          change: |-
                Micrometer's `JvmInfoMetrics` is now auto-configured. Any manually configured `JvmInfoMetrics` bean definition can be removed.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `io\.micrometer\:micrometer-.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#auto-configuration-of-micrometer-s-jvminfometrics[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/620[#620^, role="ext-link"]**
              ====
          projects:
            - spring-observability
          gitHubIssue: 620
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#cassandra-properties
        #
        - title: "Cassandra Properties"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.data\:spring-data-cassandra\:.*'

          change: |-
                Configuration Properties for Cassandra have moved from `spring.data.cassandra.*` to `spring.cassandra.*`.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.data\:spring-data-cassandra\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#cassandra-properties[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/622[#622^, role="ext-link"]**
              ====
          projects:
            - spring-data
          gitHubIssue: 622
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#hibernate-6.1
        #
        - title: "Hibernate 6.1"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.data\:spring-data-jpa\:.*'

          change: |-
            Spring Boot 3.0 uses Hibernate 6.1 by default.
            Please see the Hibernate https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html[6.0] and https://docs.jboss.org/hibernate/orm/6.1/migration-guide/migration-guide.html[6.1] migration guides to learn how this may affect your application.
            
            Dependency management and the `spring-boot-starter-data-jpa` starter have been updated to use the new `org.hibernate.orm` group ID for their Hibernate dependencies.
            
            The `spring.jpa.hibernate.use-new-id-generator-mappings` configuration property has been removed as Hibernate no longer supports switching back to the old ID generator mappings.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.data\:spring-data-jpa\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#hibernate-6.1[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/624[#624^, role="ext-link"]**
              ====
          projects:
            - spring-data
          gitHubIssue: 624
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-metrics-export-properties
        #
        - title: "Actuator Metrics Export Properties"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'io\.micrometer\:micrometer-.*'

          change: |-
            We have moved the properties controlling the https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#actuator.metrics[actuator metrics export].
            The old schema was `management.metrics.export.<product>`, the new one is `management.<product>.metrics.export` (Example: the prometheus properties moved from `management.metrics.export.prometheus` to `management.prometheus.metrics.export`).
            If you are using the `spring-boot-properties-migrator`, you will get notified at startup.
            
            See https://github.com/spring-projects/spring-boot/issues/30381[issue #30381] for details.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `io\.micrometer\:micrometer-.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-metrics-export-properties[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/626[#626^, role="ext-link"]**
              ====
          projects:
            - spring-observability
          gitHubIssue: 626
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#micrometer-binders
        #
        - title: "Micrometer binders"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'io\.micrometer\:micrometer-.*'

          change: |-
            The Micrometer team moved the binders to a separate micrometer module named `micrometer-binders`.
            To prevent split packages, the imports have changed, too. If you are using the old binders, please adjust your imports from `io.micrometer.core.instrument.binder` to `io.micrometer.binder`.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `io\.micrometer\:micrometer-.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#micrometer-binders[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/628[#628^, role="ext-link"]**
              ====
          projects:
            - spring-observability
          gitHubIssue: 628
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#updated-phases-for-graceful-shutdown
        #
        - title: "Updated Phases for Graceful Shutdown"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.boot\:spring-boot\:.*'

          change: |-
            The phases used by the `SmartLifecycle` implementations for graceful shutdown have been updated.
            Graceful shutdown now begins in phase `SmartLifecycle.DEFAULT_PHASE - 2048` and the web server is stopped in phase `SmartLifecycle.DEFAULT_PHASE - 1024`.
            Any `SmartLifecycle` implementations that were participating in graceful shutdown should be updated accordingly.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.boot\:spring-boot\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#updated-phases-for-graceful-shutdown[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/630[#630^, role="ext-link"]**
              ====
          projects:
            - spring-web
          gitHubIssue: 630
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#-httptrace--endpoint-renamed-to--httpexchanges-
        #
        - title: "'httptrace' Endpoint Renamed to 'httpexchanges'"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.boot\:spring-boot-actuator\:.*'

          change: |-
            The `httptrace` endpoint and related infrastructure records and provides access to information about recent HTTP request-response exchanges.
            Following the introduction of support for https://micrometer.io/docs/tracing[Micrometer Tracing], the name `httptrace` may cause confusion.
            To reduce this possible confusion the endpoint has been renamed to `httpexchanges`.
            The contents of the endpoint's response has also been affected by this renaming.
            Please refer to the {actuator-api}/#httpexchanges[Actuator API documentation] for further details.
            
            Related infrastructure classes have also been renamed.
            For example, `HttpTraceRepository` is now named `HttpExchangeRepository` and can be found in the `org.springframework.boot.actuate.web.exchanges` package.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.boot\:spring-boot-actuator\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#-httptrace--endpoint-renamed-to--httpexchanges-[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/632[#632^, role="ext-link"]**
              ====
          projects:
            - spring-boot
            - actuator
          gitHubIssue: 632
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#redis-properties
        #
        - title: "Redis Properties"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.data\:spring-data-redis\:.*'

          change: |-
                Configuration Properties for Redis have moved from `spring.redis.*` to `spring.data.redis.*` as redis auto-configuration requires Spring Data to be present on the classpath.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.data\:spring-data-redis\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#redis-properties[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/634[#634^, role="ext-link"]**
              ====
          projects:
            - spring-data
          gitHubIssue: 634
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#jetty
        #
        - title: "Jetty"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.eclipse\.jetty.*'

          change: |-
            Jetty does not yet support Servlet 6.0.
            To use Jetty with Spring Boot 3.0, you will have to downgrade the Servlet API to 5.0. You can use the `jakarta-servlet.version` property to do so.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.eclipse\.jetty.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#jetty[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/636[#636^, role="ext-link"]**
              ====
          projects:
            - spring-web
          gitHubIssue: 636
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#reactiveuserdetailsservice
        #
        - title: "ReactiveUserDetailsService"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.security\:spring-security-core\:.*'

          change: |-
            A `ReactiveUserDetailsService` is no longer auto-configured in the presence of an `AuthenticationManagerResolver`.
            If you application relies on `ReactiveUserDetailService` despite the presence of an `AuthenticationManagerResolver`, define your own `ReactiveUserDetailsService` bean that meets its needs.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.security\:spring-security-core\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#reactiveuserdetailsservice[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/640[#640^, role="ext-link"]**
              ====
          projects:
            - spring-security
          gitHubIssue: 640
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-json
        #
        - title: "Actuator JSON"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.boot\:spring-boot-actuator\:.*'

          change: |-
            Responses from the actuator endpoints shipped with Spring Boot now use an isolated `ObjectMapper` instance to ensure results are consistent.
            If you want to revert to the old behavior and use the application `ObjectMapper` you can set `management.endpoints.jackson.isolated-object-mapper` to `false`.
            
            If you have developed your own endpoints, you might want to ensure that responses implement the `OperationResponseBody` interface.
            This will ensure that the isolated `ObjectMapper` is considered when serializing the response as JSON.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.boot\:spring-boot-actuator\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-json[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/642[#642^, role="ext-link"]**
              ====
          projects:
            - spring-boot
            - actuator
          gitHubIssue: 642
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#yamljsonparser-has-been-removed
        #
        - title: "YamlJsonParser Has Been Removed"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.boot\:spring-boot-starter\:.*'

          change: |-
            `YamlJsonParser` has been removed as SnakeYAML's JSON parsing was inconsistent with the other parser implementations.
            In the unlikely event that you were using `YamlJsonParser` directly, please migrate to one of the other `JsonParser` implementations.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.boot\:spring-boot-starter\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#yamljsonparser-has-been-removed[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/644[#644^, role="ext-link"]**
              ====
          projects:
            - spring-boot
          gitHubIssue: 644
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#flyway
        #
        - title: "Flyway"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.flywaydb\:flyway-core\:.*'

          change: |-
            Spring Boot 3.0 uses Flyway 9.0 by default. Please see the Flyway https://flywaydb.org/documentation/learnmore/releaseNotes#9.0.0[release notes] and https://flywaydb.org/blog/version-9-is-coming-what-developers-need-to-know[blog post] to learn how this may affect your application.
            
            `FlywayConfigurationCustomizer` beans are now called to customize the `FluentConfiguration` after any `Callback` and `JavaMigration` beans have been added to the configuration.
            An application that defines `Callback` and `JavaMigration` beans and adds callbacks and Java migrations using a customizer may have to be updated to ensure that the intended callbacks and Java migrations are used.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.flywaydb\:flyway-core\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#flyway[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/648[#648^, role="ext-link"]**
              ====
          projects:
            - spring-data
          gitHubIssue: 648
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#jmx-endpoint-exposure
        #
        - title: "JMX Endpoint Exposure"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.boot\:spring-boot-actuator\:.*'

          change: |-
            By default, only the health endpoint is now exposed over JMX, to align with the default web endpoint exposure.
            This can be changed by configuring the `management.endpoints.jmx.exposure.include` and `management.endpoints.jmx.exposure.exclude` properties.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.boot\:spring-boot-actuator\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#jmx-endpoint-exposure[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/650[#650^, role="ext-link"]**
              ====
          projects:
            - spring-boot
            - actuator
          gitHubIssue: 650
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#-server.max-http-header-size-
        #
        - title: "'server.max-http-header-size'"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.boot\:spring-boot\:.*'

          change: |-
            Previously, the `server.max-http-header-size` was treated inconsistently across the four supported embedded web servers.
            When using Jetty, Netty, or Undertow it would configure the max HTTP request header size.
            When using Tomcat it would configure the max HTTP request and response header sizes.
            
            To address this inconsistency, `server.max-http-header-size` has been deprecated and a replacement, `server.max-http-request-header-size`, has been introduced.
            Both properties now only apply to the request header size, irrespective of the underlying web server.
            
            To limit the max header size of an HTTP response on Tomcat or Jetty (the only two servers that support such a setting), use a `WebServerFactoryCustomizer`.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.boot\:spring-boot\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#-server.max-http-header-size-[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/652[#652^, role="ext-link"]**
              ====
          projects:
            - spring-web
          gitHubIssue: 652
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#auto-configuration-files
        #
        - title: "Auto-configuration Files"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.boot\:spring-boot-starter\:.*'

          change: |-
            Spring Boot 2.7 https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.7-Release-Notes#changes-to-auto-configuration[introduced] a new `META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports` file for registering auto-configurations, while maintaining backwards compatibility with registration in `spring.factories`.
            With this release, support for registering auto-configurations in `spring.factories` has been removed in favor of the imports file.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.boot\:spring-boot-starter\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#auto-configuration-files[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/654[#654^, role="ext-link"]**
              ====
          projects:
            - spring-boot
          gitHubIssue: 654
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#embedded-mongodb
        #
        - title: "Embedded MongoDB"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'org\.springframework\.data\:spring-data-mongodb\:.*'

          change: |-
            Auto-configuration and dependency management for Flapdoodle embedded MongoDB has been removed.
            If you are using embedded MongoDB for testing, use the auto-configuration library provided by the https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo.spring[Flapdoodle project] or modify the tests to use the https://www.testcontainers.org/[Testcontainers] project instead of embedded MongoDB.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `org\.springframework\.data\:spring-data-monngodb\:.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#embedded-mongodb[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/656[#656^, role="ext-link"]**
              ====
          projects:
            - spring-data
          gitHubIssue: 656
        #  contributors:
        #    - Your Name[@your-gh-handle]


        #
        # Generated from https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#mongo-health-check
        #
        - title: "Mongo Health Check"
          helper:
            type: org.springframework.sbm.boot.upgrade_27_30.report.helper.ConditionOnlyHelper
            condition:
              type: org.springframework.sbm.build.migration.conditions.AnyEffectiveDependencyExistMatchingRegex
              dependencies:
                - 'io\.micrometer\:micrometer-.*'

          change: |-
            The `HealthIndicator` for MongoDB now supports MongoDB's Stable API.
            The `buildInfo` query has been replaced with `isMaster` and the response now contains `maxWireVersion` instead of `version`.
            As described in the https://www.mongodb.com/docs/v4.2/reference/command/isMaster/[MongoDB documentation], clients may use `maxWireVersion` to help negotiate compatibility with MongoDB.
            Note that `maxWireVersion` is an integer.

          affected: |-
            Actually, we don't know if the scanned application is really affected by this change.
            But we found a dependency matching regex `io\.micrometer\:micrometer-.*`.
            This indicates that the scanned application might be affected.
          remediation:
            description: |-
              [IMPORTANT]
              ====
              This section has been automatically generated from the https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#mongo-health-check[Spring Boot 3.0 Migration Guide^, role="ext-link"]. +
              **Please consider contributing to issue https://github.com/spring-projects-experimental/spring-boot-migrator/issues/658[#658^, role="ext-link"]**
              ====
          projects:
            - spring-observability
          gitHubIssue: 658
        #  contributors:
        #    - Your Name[@your-gh-handle]


      footer: |-
            We want to say thank you to all Contributors:
            
            Generated by Spring Boot Migrator (experimental)