= Introduce Spring Cloud Config

== Introduction

This demo shows how SBM can be used to introduce https://cloud.spring.io/spring-cloud-config/reference/html/[Spring Cloud Config]
to an existing Spring Boot project by applying recipe `cn-spring-cloud-config-server`.

=== Requirements

The demo was created on Mac OS but should run under Windows with a shell too.

== The Demo

For a simple Spring Boot application with two properties `property1` and `property2` and two profiles `default` and `foo`
Spring Cloud Config should be introduced.

=== Run the application

Build the application
`mvn clean package`

Run the application (default profile)
`mvn spring-boot:run`

Call the REST endpoints providing the values for the properties
`http://localhost:8080/config1` will return `yes` for `property1` in default profile (application.properties)
`http://localhost:8080/config2` will return `no` for `property2` in default profile (application.properties)

Run the application (foo profile)
`mvn spring-boot:run -Dspring-boot.run.profiles=foo`

Call the REST endpoints providing the values for the properties
`http://localhost:8080/config1` will return `yes` for `property1` in default profile (application.properties)
`http://localhost:8080/config2` will return `foobar` for `property2` in foo profile (application-foo.properties)

=== Run the migration

After verifying the application we can use SBM to introduce Spring Cloud Config and externalize the properties and provide
them through a Spring Cloud Config Server.

Start Spring Boot Migrator
-jar spring-boot-migrator.jar`

Scan the application
`scan ./testcode/given/demo-application`

Apply recipe
`apply cn-spring-cloud-config-server`

Exit SBM
`exit`


=== Verify the result
The recipe created a new project `demo-application-config` which now contains the values for properties in all profiles.
The properties file for profile `foo` was removed and will be retrieved from a Spring Cloud Config Server.
The connection property to the Spring Cloud Config Server has been added to `application.properties`.

== Run the demo

* Move into the demo dir `demos/demo-introduce-spring-cloud-config`
* Run the shellscript `./run-demo.sh`
* Verify that `application-foo.properties` has been removed in the demo-application
* Verify that the properties files were moved into the config project demo-application-config


* Start Spring Cloud Config Server
* Move into `demos/demo-introduce-spring-cloud-config/testcode/result/sccs-client-config-server`
* `mvn clean package`
* `mvn spring-boot:run -Dspring-boot.run.jvmArguments=\"-Dspring.cloud.config.server.git.uri=$(realpath ../demo-application-config)\"`


* Start the application
* Move into `demos/demo-introduce-spring-cloud-config/testcode/result/demo-application`
* `mvn spring-boot:run -Dspring-boot.run.profiles=foo`
* Verify that the properties are retrieved from Spring Cloud Config Server now
* `curl localhost:8080/config1` should return `yes`
* `curl localhost:8080/config2` should return `foobar` (overwritten by profile 'foo')